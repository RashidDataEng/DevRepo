{
	"name": "Customer_CachetoODS",
	"properties": {
		"description": "Copy new or updated rows only from database using external control table",
		"activities": [
			{
				"name": "LookupLastWaterMark",
				"description": "Retrieve the last high-watermark value stored in external control table",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Landing_watermarktableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "LookupCurrentWaterMark",
				"description": "Retrieve  the current maximum value in watermark column of source data store",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Run Start 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Customer'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "DeltaCopyfromDB",
				"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "LookupCurrentWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupLastWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Truncate Landing_Invoice Procedure",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupDeltaOffset",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OdbcSource",
						"query": {
							"value": "select         ID\n      ,FinanceCompany\n      ,FinanceDocument\n      ,ThirtyDayAccount\n      ,PORequired\n      ,Suite\n      ,Longitude\n      ,Latitude\n      ,Statement\n      ,DoNotMail\n      ,ShowInvoicesHyperlink\n      ,Extensions\n      ,Overdue30\n      ,Overdue60\n      ,Overdue90\n      ,Overdue\n      ,MaritalStatus\n      ,Dependants\n      ,EmpOccupation\n      ,Employer\n      ,DoNotService\n      ,MailingSameAsPhysical\n      ,InvTypeCode\n      ,EmpSupervisor\n      ,EmpAltSupervisor\n      ,EmpPayday\n      ,EmpExt\n      ,EmpFromTime\n      ,EmpToTime\n      ,WebID\n      ,WebPassword\n      ,WebDefaultLocation\n      ,WebShipPreference\n      ,WebChargeShipping\n      ,PaymentTypeCode\n      ,BankruptCode\n      ,CreditHold\n      ,WebNotShowRef\n      ,WebNotShowPastDueWarn\n      ,DoNotEmail\n      ,InvoiceDeliveryMethod\n      ,WebViewPartsLookup\n      ,WebViewCurrentOrders\n      ,WebViewOpenPartsList\n      ,WebViewHistory\n      ,WebAccessType\n      ,WebPassword2\n      ,WebCarrierCode\n      ,GoogleValidated\n      ,WebAllowSearchAll\n      ,Phone1TextEnabled\n      ,Phone2TextEnabled\n      ,BusinessPhoneTextEnabled\n      ,FaxTextEnabled\n      ,WebMessageUserCode\n      ,WebMessageRecUserCode\n      ,DoNotText\n      ,DoNotMMS\n      ,PreferredContact\n      ,WebSubmitClaim1Year\n      ,WebSubmitClaimSub\n      ,WebSubmitClaimWolf\n      ,WebReturnParts\n      ,UpdateContactInfo\n      ,SynchInMobileTech\n      ,WebLanguage\n      ,SalespersonCode\n      ,CreditManagerUserCode\n      ,CreditHoldDays\n      ,ForceCreditApproval\n      ,DoNotAllowSaveCreditCard\n      ,UseProjectPricing\n      ,ProjectCode\n      ,SaleReferralCode\n      ,Country\n      ,DeclineEmail\n      ,ParentCompanyCode\n      ,Table1Code\n      ,ExternalID\n      ,AccountType\n      ,AllowCharge\n      ,AveragePaymentDays\n      ,Balance\n      ,BillServiceCharge\n      ,BranchCode\n      ,City\n      ,Code\n      ,Contact\n      ,CreditLimit\n      ,DateCreated\n      ,DateModified\n      ,Directions\n      ,EnableCreditLimit\n      ,ExpiryDate\n      ,Field1\n      ,Field2\n      ,Field3\n      ,Field4\n      ,Field5\n      ,ItemListPriceCode\n      ,LaborRate\n      ,LastActivityDate\n      ,LastYearPurchase\n      ,MapReference\n      ,MapZoneCode\n      ,Note\n      ,OtherListPriceCode\n      ,PONumber\n      ,PrintStatement\n      ,SerialListPriceCode\n      ,State\n      ,Tax1Exempt\n      ,Tax2Exempt\n      ,Tax3Exempt\n      ,TaxCode\n      ,UserCreated\n      ,UserModified\n      ,Website\n      ,YTDPurchase\n      ,ZipCode\nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_created} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')\n\t and (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_created} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')\n",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink"
					},
					"enableStaging": false,
					"dataIntegrationUnits": 0
				},
				"inputs": [
					{
						"referenceName": "OdbcDataSource",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Landing_CustomerDataset",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "UpdateWaterMark",
				"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run End 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLEndTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Truncate Landing_Invoice Procedure",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[LandingTablesTruncate_Customer]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1_Landing Linked Service",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Delete",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Customer_Delete]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Insert",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Delete",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Customer_Insert]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger Begin 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger End 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "UpdateWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LookupDeltaOffset",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Customer' AND\n             [Group]=10",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Run Start 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run Start 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run End 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLEndTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run Start 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run Start 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger End 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger Begin 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run Start 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Run Start 1",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run End 1",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "DeltaCopyfromDB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run Start 2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run End 2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Insert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"Data_Source_Table_Name": {
				"type": "String",
				"defaultValue": "SQLUser.Customer"
			},
			"Data_Source_WaterMarkColumn": {
				"type": "String",
				"defaultValue": "DateModified"
			},
			"Data_Destination_Container": {
				"type": "String",
				"defaultValue": "rd.Customer"
			},
			"Data_Destination_Directory": {
				"type": "String"
			},
			"Control_Table_Table_Name": {
				"type": "String",
				"defaultValue": "watermark_table"
			},
			"Control_Table_Column_Name": {
				"type": "String",
				"defaultValue": "Invoicewatermark_value"
			},
			"Data_Source_WaterMarkColumn_modified": {
				"type": "string",
				"defaultValue": "SQLUser.Customer.DateModified"
			},
			"DeltaOffset": {
				"type": "int",
				"defaultValue": -1
			},
			"ControlTable_Entity": {
				"type": "string",
				"defaultValue": "Customer"
			},
			"ControlTable_Group1": {
				"type": "int",
				"defaultValue": 10
			},
			"ControlTable_Group2": {
				"type": "int",
				"defaultValue": 20
			},
			"ETLBeginTimeColumn": {
				"type": "string",
				"defaultValue": "ETL Last Run Start"
			},
			"ETLEndTimeColumn": {
				"type": "string",
				"defaultValue": "ETL Last Run End"
			},
			"Data_Source_WaterMarkColumn_created": {
				"type": "string",
				"defaultValue": "DateCreated"
			}
		},
		"variables": {
			"Run Start 1": {
				"type": "String"
			},
			"Run Start 2": {
				"type": "String"
			},
			"Run End 1": {
				"type": "String"
			},
			"Run End 2": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2021-06-02T21:56:56Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}