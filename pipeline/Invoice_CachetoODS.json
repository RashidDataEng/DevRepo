{
	"name": "Invoice_CachetoODS",
	"properties": {
		"description": "Copy new or updated rows only from database using external control table",
		"activities": [
			{
				"name": "LookupLastWaterMark",
				"description": "Retrieve the last high-watermark value stored in external control table",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Landing_watermarktableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "LookupCurrentWaterMark",
				"description": "Retrieve  the current maximum value in watermark column of source data store",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Run Start 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "DeltaCopyfromDB",
				"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "LookupCurrentWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupLastWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Truncate Landing_Invoice Procedure",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupDeltaOffset",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OdbcSource",
						"query": {
							"value": "select  ID , Financed , Void , Qualification , Priority , Tax3Percentage \n      , SvcRepairCode1 , SvcRepairCode2 , SvcRepairCode3 , SvcRepairCode4 , ContractCode , SvcContract \n      , UserFinished , UserPosted , UpdateHistoryWarranty , ShipMethod , TimeCreated , TimeModified , TimeFinished \n      , DispatchUnits , EDIDateStamp , EDITimeStamp , PrintMethod , DispatchStartTime , TripChargeCode \n      , TripChargeAmount \n      , Locked \n      , MobileTechInvoiceCode \n      , ServiceRequestID \n      , CarrierCode \n      , ShipViaCode \n      , JobStatusUpdate \n      , DispatchEmail \n      , LastDateSaved \n      , LastTimeSaved \n      , Terms \n      , SvcEquipmentNumber \n      , WebOrderID \n      , Department \n      , CreditStatusCode \n      , CreditApprovedUserCode \n      , CreditApprovedDateStamp \n      , CreditApprovedTimeStamp \n      , EDIMaroline \n      , RequestedDate \n      , SvcCSRInvoice \n      , SvcSoldList \n      , SvcSoldSTDCost \n      , SvcFollowUpDate \n      , SvcScheduleDate \n      , Tax2MaxAmount \n      , EDIWhirlpool \n      , MinDepositPercent \n      , UnitModifier \n      , DateFinished \n      , DatePosted \n      , TimePosted \n      , TTRTaxCalculated \n      , PickUpBranchCode \n      , PodiumOptOut \n      , SignCustmizedFields \n      , AVBSaleDateSent \n      , AVBSaleTimeSent \n      , sysCreated \n      , sysModified \n      , TTRJurisdictionCode \n      , BranchCode \n      , COGSPosted \n      , CallSequence \n      , Code \n      , CommittedPaymentTotal \n      , DateCreated \n      , DateModified \n      , DispatchPriority \n      , DispatchRequestedRouteCode \n      , DispatchSpecRequest \n      , DispatchTime \n      , DispatchTimeAM \n      , Estimate \n      , Field1 \n      , Field2 \n      , Field3 \n      , Field4 \n      , Field5 \n      , InvFinishDate \n      , InvStartDate \n      , InvTypeCode \n      , ItemListPriceCode \n      , ItemTotal \n      , JobLocation \n      , JobNumber \n      , JobStatusCode \n      , LaborRate \n      , LaborTotal \n      , MapReference \n      , MapZoneCode \n      , MiscTotal \n      , OpenPaymentTotal \n      , OtherListPriceCode \n      , PONumber \n      , PaymentTypeCode \n      , PickUpDate \n      , Reference \n      , SaleReferralCode \n      , Salesperson1Code \n      , Salesperson2Code \n      , Salesperson2Percentage \n      , ScheduleDate \n      , SerialListPriceCode \n      , SerialTotal \n      , Status \n      , SvcAgreementExpDate \n      , SvcAgreementNumber \n      , SvcBrandCode \n      , SvcCenter \n      , SvcCenterNumber \n      , SvcComplaintCode \n      , SvcComplaintDesc \n      , SvcDatePurchased \n      , SvcDealerCode \n      , SvcDealerDesc \n      , SvcDistributorNumber \n      , SvcInWarranty \n      , SvcMfgCodeEiaNumber \n      , SvcMicroLeak \n      , SvcMiles \n      , SvcMilesRate \n      , SvcMilesTotal \n      , SvcModel \n      , SvcMotorNewNumber \n      , SvcMotorOldNumber \n      , SvcPerformedCode \n      , SvcPerformedDesc \n      , SvcProduct \n      , SvcProductCode \n      , SvcRepairCatMinorMajor \n      , SvcRepairCategory \n      , SvcRepairCode \n      , SvcRunNumber \n      , SvcSerial \n      , SvcSpecAuthNumber \n      , SvcStockMerchandise \n      , SvcTimeCompleted1 \n      , SvcTimeCompleted2 \n      , SvcTimeOnJob1 \n      , SvcTimeOnJob2 \n      , SvcTimeStarted1 \n      , SvcTimeStarted2 \n      , Tax1Exempt \n      , Tax1Total \n      , Tax2Code \n      , Tax2Exempt \n      , Tax2Percentage \n      , Tax2Total \n      , Tax3Exempt \n      , Tax3Total \n      , UserCreated \n      , UserModified \n      , Warranty \n      , WarrantyField1 \n      , WarrantyField2 \n      , WarrantyField3 \n      , WarrantyField4 \n      , WarrantyField5 \n      , WtyTotal \nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}'  OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} IS NULL OR\nSQLUser.Invoice.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')\n\t and (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'  OR \nSQLUser.Invoice.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')\n",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink"
					},
					"enableStaging": false,
					"dataIntegrationUnits": 0
				},
				"inputs": [
					{
						"referenceName": "OdbcDataSource",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Landing_InvoiceDataset",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "UpdateWaterMark",
				"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run End 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLEndTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Truncate Landing_Invoice Procedure",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[LandingTablesTruncate_Invoice]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1_Landing Linked Service",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Test",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Invoice_Delete]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Test_2_Insert",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Test",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Invoice_Insert]"
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger Begin 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger End 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "UpdateWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LookupDeltaOffset",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger Begin 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Run Start 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run Start 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run End 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLEndTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run Start 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Run Start 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_ETLTimes]",
					"storedProcedureParameters": {
						"Column_Name": {
							"value": {
								"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"GetRunEnd": {
							"value": {
								"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger End 1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group1}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Load Active Trigger Begin 2",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run Start 2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[Control_LoadActive]",
					"storedProcedureParameters": {
						"Entity": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Entity}",
								"type": "Expression"
							},
							"type": "String"
						},
						"Group": {
							"value": {
								"value": "@{pipeline().parameters.ControlTable_Group2}",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Secondary1LinkedService_Test",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Run Start 1",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run End 1",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "DeltaCopyfromDB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run Start 2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Load Active Trigger End 1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Run End 2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Test_2_Insert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ControlTableDataset",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"Data_Source_Table_Name": {
				"type": "String",
				"defaultValue": "SQLUser.Invoice"
			},
			"Data_Source_WaterMarkColumn": {
				"type": "String",
				"defaultValue": "sysModified"
			},
			"Data_Destination_Container": {
				"type": "String",
				"defaultValue": "rd.Invoice"
			},
			"Data_Destination_Directory": {
				"type": "String"
			},
			"Control_Table_Table_Name": {
				"type": "String",
				"defaultValue": "watermark_table"
			},
			"Control_Table_Column_Name": {
				"type": "String",
				"defaultValue": "Invoicewatermark_value"
			},
			"Data_Source_WaterMarkColumn_modified": {
				"type": "string",
				"defaultValue": "SQLUser.Invoice.sysModified"
			},
			"DeltaOffset": {
				"type": "int",
				"defaultValue": -1
			},
			"ControlTable_Entity": {
				"type": "string",
				"defaultValue": "Invoice"
			},
			"ControlTable_Group1": {
				"type": "int",
				"defaultValue": 10
			},
			"ControlTable_Group2": {
				"type": "int",
				"defaultValue": 20
			},
			"ETLBeginTimeColumn": {
				"type": "string",
				"defaultValue": "ETL Last Run Start"
			},
			"ETLEndTimeColumn": {
				"type": "string",
				"defaultValue": "ETL Last Run End"
			}
		},
		"variables": {
			"Run Start 1": {
				"type": "String"
			},
			"Run Start 2": {
				"type": "String"
			},
			"Run End 1": {
				"type": "String"
			},
			"Run End 2": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2021-06-11T13:58:06Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}