{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "rd-DevDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_hdo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Odbc1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Branch_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Branch"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_BranchDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Branch]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Branch_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSBranch_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Branch"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T00:02:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Brand_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Brand"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_BrandDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Brand]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Brand_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSBrand_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Brand"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T01:35:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cache to Azure SQL Copy Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Financed",
											"type": "Boolean"
										},
										"sink": {
											"name": "Financed",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Void",
											"type": "Boolean"
										},
										"sink": {
											"name": "Void",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Qualification",
											"type": "String"
										},
										"sink": {
											"name": "Qualification",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Priority",
											"type": "String"
										},
										"sink": {
											"name": "Priority",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax3Percentage",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax3Percentage",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "SvcRepairCode1",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCode1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRepairCode2",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCode2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRepairCode3",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCode3",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRepairCode4",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCode4",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ContractCode",
											"type": "String"
										},
										"sink": {
											"name": "ContractCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcContract",
											"type": "String"
										},
										"sink": {
											"name": "SvcContract",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UserFinished",
											"type": "String"
										},
										"sink": {
											"name": "UserFinished",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UserPosted",
											"type": "String"
										},
										"sink": {
											"name": "UserPosted",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UpdateHistoryWarranty",
											"type": "Boolean"
										},
										"sink": {
											"name": "UpdateHistoryWarranty",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "ShipMethod",
											"type": "String"
										},
										"sink": {
											"name": "ShipMethod",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TimeCreated",
											"type": "String"
										},
										"sink": {
											"name": "TimeCreated",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TimeModified",
											"type": "String"
										},
										"sink": {
											"name": "TimeModified",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TimeFinished",
											"type": "String"
										},
										"sink": {
											"name": "TimeFinished",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DispatchUnits",
											"type": "Int32"
										},
										"sink": {
											"name": "DispatchUnits",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EDIDateStamp",
											"type": "DateTime"
										},
										"sink": {
											"name": "EDIDateStamp",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "EDITimeStamp",
											"type": "String"
										},
										"sink": {
											"name": "EDITimeStamp",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PrintMethod",
											"type": "String"
										},
										"sink": {
											"name": "PrintMethod",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DispatchStartTime",
											"type": "String"
										},
										"sink": {
											"name": "DispatchStartTime",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TripChargeCode",
											"type": "String"
										},
										"sink": {
											"name": "TripChargeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TripChargeAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TripChargeAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Locked",
											"type": "Boolean"
										},
										"sink": {
											"name": "Locked",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "MobileTechInvoiceCode",
											"type": "String"
										},
										"sink": {
											"name": "MobileTechInvoiceCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ServiceRequestID",
											"type": "String"
										},
										"sink": {
											"name": "ServiceRequestID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CarrierCode",
											"type": "String"
										},
										"sink": {
											"name": "CarrierCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ShipViaCode",
											"type": "String"
										},
										"sink": {
											"name": "ShipViaCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "JobStatusUpdate",
											"type": "Boolean"
										},
										"sink": {
											"name": "JobStatusUpdate",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "DispatchEmail",
											"type": "Boolean"
										},
										"sink": {
											"name": "DispatchEmail",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "LastDateSaved",
											"type": "DateTime"
										},
										"sink": {
											"name": "LastDateSaved",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "LastTimeSaved",
											"type": "String"
										},
										"sink": {
											"name": "LastTimeSaved",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Terms",
											"type": "String"
										},
										"sink": {
											"name": "Terms",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcEquipmentNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcEquipmentNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WebOrderID",
											"type": "String"
										},
										"sink": {
											"name": "WebOrderID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreditStatusCode",
											"type": "String"
										},
										"sink": {
											"name": "CreditStatusCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreditApprovedUserCode",
											"type": "String"
										},
										"sink": {
											"name": "CreditApprovedUserCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreditApprovedDateStamp",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreditApprovedDateStamp",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CreditApprovedTimeStamp",
											"type": "String"
										},
										"sink": {
											"name": "CreditApprovedTimeStamp",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EDIMaroline",
											"type": "Boolean"
										},
										"sink": {
											"name": "EDIMaroline",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "RequestedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "RequestedDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SvcCSRInvoice",
											"type": "String"
										},
										"sink": {
											"name": "SvcCSRInvoice",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcSoldList",
											"type": "Decimal"
										},
										"sink": {
											"name": "SvcSoldList",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "SvcSoldSTDCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "SvcSoldSTDCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "SvcFollowUpDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SvcFollowUpDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SvcScheduleDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SvcScheduleDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Tax2MaxAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax2MaxAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "EDIWhirlpool",
											"type": "Boolean"
										},
										"sink": {
											"name": "EDIWhirlpool",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "MinDepositPercent",
											"type": "Decimal"
										},
										"sink": {
											"name": "MinDepositPercent",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "UnitModifier",
											"type": "Int32"
										},
										"sink": {
											"name": "UnitModifier",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DateFinished",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateFinished",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DatePosted",
											"type": "DateTime"
										},
										"sink": {
											"name": "DatePosted",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TimePosted",
											"type": "String"
										},
										"sink": {
											"name": "TimePosted",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TTRTaxCalculated",
											"type": "Boolean"
										},
										"sink": {
											"name": "TTRTaxCalculated",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "PickUpBranchCode",
											"type": "String"
										},
										"sink": {
											"name": "PickUpBranchCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PodiumOptOut",
											"type": "Boolean"
										},
										"sink": {
											"name": "PodiumOptOut",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "SignCustmizedFields",
											"type": "String"
										},
										"sink": {
											"name": "SignCustmizedFields",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AVBSaleDateSent",
											"type": "DateTime"
										},
										"sink": {
											"name": "AVBSaleDateSent",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AVBSaleTimeSent",
											"type": "String"
										},
										"sink": {
											"name": "AVBSaleTimeSent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "sysCreated",
											"type": "DateTime"
										},
										"sink": {
											"name": "sysCreated",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "sysModified",
											"type": "DateTime"
										},
										"sink": {
											"name": "sysModified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TTRJurisdictionCode",
											"type": "String"
										},
										"sink": {
											"name": "TTRJurisdictionCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BranchCode",
											"type": "String"
										},
										"sink": {
											"name": "BranchCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "COGSPosted",
											"type": "Boolean"
										},
										"sink": {
											"name": "COGSPosted",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "CallSequence",
											"type": "Int32"
										},
										"sink": {
											"name": "CallSequence",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Code",
											"type": "String"
										},
										"sink": {
											"name": "Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CommittedPaymentTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "CommittedPaymentTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "DateCreated",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateCreated",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DateModified",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateModified",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DispatchPriority",
											"type": "String"
										},
										"sink": {
											"name": "DispatchPriority",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DispatchRequestedRouteCode",
											"type": "String"
										},
										"sink": {
											"name": "DispatchRequestedRouteCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DispatchSpecRequest",
											"type": "String"
										},
										"sink": {
											"name": "DispatchSpecRequest",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DispatchTime",
											"type": "String"
										},
										"sink": {
											"name": "DispatchTime",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DispatchTimeAM",
											"type": "String"
										},
										"sink": {
											"name": "DispatchTimeAM",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Estimate",
											"type": "String"
										},
										"sink": {
											"name": "Estimate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Field1",
											"type": "String"
										},
										"sink": {
											"name": "Field1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Field2",
											"type": "String"
										},
										"sink": {
											"name": "Field2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Field3",
											"type": "String"
										},
										"sink": {
											"name": "Field3",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Field4",
											"type": "String"
										},
										"sink": {
											"name": "Field4",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Field5",
											"type": "String"
										},
										"sink": {
											"name": "Field5",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "InvFinishDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "InvFinishDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "InvStartDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "InvStartDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "InvTypeCode",
											"type": "String"
										},
										"sink": {
											"name": "InvTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ItemListPriceCode",
											"type": "String"
										},
										"sink": {
											"name": "ItemListPriceCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ItemTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "ItemTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "JobLocation",
											"type": "String"
										},
										"sink": {
											"name": "JobLocation",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "JobNumber",
											"type": "String"
										},
										"sink": {
											"name": "JobNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "JobStatusCode",
											"type": "String"
										},
										"sink": {
											"name": "JobStatusCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LaborRate",
											"type": "String"
										},
										"sink": {
											"name": "LaborRate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LaborTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "LaborTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "MapReference",
											"type": "String"
										},
										"sink": {
											"name": "MapReference",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MapZoneCode",
											"type": "String"
										},
										"sink": {
											"name": "MapZoneCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MiscTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "MiscTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "OpenPaymentTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "OpenPaymentTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "OtherListPriceCode",
											"type": "String"
										},
										"sink": {
											"name": "OtherListPriceCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PONumber",
											"type": "String"
										},
										"sink": {
											"name": "PONumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PaymentTypeCode",
											"type": "String"
										},
										"sink": {
											"name": "PaymentTypeCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PickUpDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PickUpDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Reference",
											"type": "String"
										},
										"sink": {
											"name": "Reference",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SaleReferralCode",
											"type": "String"
										},
										"sink": {
											"name": "SaleReferralCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Salesperson1Code",
											"type": "String"
										},
										"sink": {
											"name": "Salesperson1Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Salesperson2Code",
											"type": "String"
										},
										"sink": {
											"name": "Salesperson2Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Salesperson2Percentage",
											"type": "Decimal"
										},
										"sink": {
											"name": "Salesperson2Percentage",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "ScheduleDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ScheduleDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SerialListPriceCode",
											"type": "String"
										},
										"sink": {
											"name": "SerialListPriceCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SerialTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "SerialTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcAgreementExpDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SvcAgreementExpDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SvcAgreementNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcAgreementNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcBrandCode",
											"type": "String"
										},
										"sink": {
											"name": "SvcBrandCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcCenter",
											"type": "String"
										},
										"sink": {
											"name": "SvcCenter",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcCenterNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcCenterNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcComplaintCode",
											"type": "String"
										},
										"sink": {
											"name": "SvcComplaintCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcComplaintDesc",
											"type": "String"
										},
										"sink": {
											"name": "SvcComplaintDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcDatePurchased",
											"type": "DateTime"
										},
										"sink": {
											"name": "SvcDatePurchased",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SvcDealerCode",
											"type": "String"
										},
										"sink": {
											"name": "SvcDealerCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcDealerDesc",
											"type": "String"
										},
										"sink": {
											"name": "SvcDealerDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcDistributorNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcDistributorNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcInWarranty",
											"type": "String"
										},
										"sink": {
											"name": "SvcInWarranty",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcMfgCodeEiaNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcMfgCodeEiaNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcMicroLeak",
											"type": "String"
										},
										"sink": {
											"name": "SvcMicroLeak",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcMiles",
											"type": "Decimal"
										},
										"sink": {
											"name": "SvcMiles",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "SvcMilesRate",
											"type": "Decimal"
										},
										"sink": {
											"name": "SvcMilesRate",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "SvcMilesTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "SvcMilesTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "SvcModel",
											"type": "String"
										},
										"sink": {
											"name": "SvcModel",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcMotorNewNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcMotorNewNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcMotorOldNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcMotorOldNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcPerformedCode",
											"type": "String"
										},
										"sink": {
											"name": "SvcPerformedCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcPerformedDesc",
											"type": "String"
										},
										"sink": {
											"name": "SvcPerformedDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcProduct",
											"type": "String"
										},
										"sink": {
											"name": "SvcProduct",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcProductCode",
											"type": "String"
										},
										"sink": {
											"name": "SvcProductCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRepairCatMinorMajor",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCatMinorMajor",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRepairCategory",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCategory",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRepairCode",
											"type": "String"
										},
										"sink": {
											"name": "SvcRepairCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcRunNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcRunNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcSerial",
											"type": "String"
										},
										"sink": {
											"name": "SvcSerial",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcSpecAuthNumber",
											"type": "String"
										},
										"sink": {
											"name": "SvcSpecAuthNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcStockMerchandise",
											"type": "Boolean"
										},
										"sink": {
											"name": "SvcStockMerchandise",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "SvcTimeCompleted1",
											"type": "String"
										},
										"sink": {
											"name": "SvcTimeCompleted1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcTimeCompleted2",
											"type": "String"
										},
										"sink": {
											"name": "SvcTimeCompleted2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcTimeOnJob1",
											"type": "String"
										},
										"sink": {
											"name": "SvcTimeOnJob1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcTimeOnJob2",
											"type": "String"
										},
										"sink": {
											"name": "SvcTimeOnJob2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcTimeStarted1",
											"type": "String"
										},
										"sink": {
											"name": "SvcTimeStarted1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SvcTimeStarted2",
											"type": "String"
										},
										"sink": {
											"name": "SvcTimeStarted2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax1Exempt",
											"type": "String"
										},
										"sink": {
											"name": "Tax1Exempt",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax1Total",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax1Total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Tax2Code",
											"type": "String"
										},
										"sink": {
											"name": "Tax2Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax2Exempt",
											"type": "String"
										},
										"sink": {
											"name": "Tax2Exempt",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax2Percentage",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax2Percentage",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Tax2Total",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax2Total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Tax3Exempt",
											"type": "String"
										},
										"sink": {
											"name": "Tax3Exempt",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax3Total",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax3Total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "UserCreated",
											"type": "String"
										},
										"sink": {
											"name": "UserCreated",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UserModified",
											"type": "String"
										},
										"sink": {
											"name": "UserModified",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Warranty",
											"type": "String"
										},
										"sink": {
											"name": "Warranty",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WarrantyField1",
											"type": "String"
										},
										"sink": {
											"name": "WarrantyField1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WarrantyField2",
											"type": "String"
										},
										"sink": {
											"name": "WarrantyField2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WarrantyField3",
											"type": "String"
										},
										"sink": {
											"name": "WarrantyField3",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WarrantyField4",
											"type": "String"
										},
										"sink": {
											"name": "WarrantyField4",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WarrantyField5",
											"type": "String"
										},
										"sink": {
											"name": "WarrantyField5",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WtyTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "WtyTotal",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Invoice"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Invoice"
								}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-25T20:46:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cache to Azure SQL Copy Activity2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.InvoiceAddress"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "InvoiceAddressODS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-25T20:48:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cache to Azure SQL Copy Activity3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Serial"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SerialODS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-07T19:03:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cache to Azure SQL Copy InvoiceMisc_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.InvoiceMisc"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "InvoiceMiscODS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-03T16:58:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cache to Azure SQL Copy InvoiceModel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TakenStatus",
											"type": "String"
										},
										"sink": {
											"name": "TakenStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TakenDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "TakenDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "AverageCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "AverageCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "StandardCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "StandardCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "LastCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "LastCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Color",
											"type": "String"
										},
										"sink": {
											"name": "Color",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "POCode",
											"type": "String"
										},
										"sink": {
											"name": "POCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reference",
											"type": "String"
										},
										"sink": {
											"name": "Reference",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PODateStamp",
											"type": "DateTime"
										},
										"sink": {
											"name": "PODateStamp",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "POLineTimeStamp",
											"type": "String"
										},
										"sink": {
											"name": "POLineTimeStamp",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SpecialOrderDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SpecialOrderDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TripNo",
											"type": "Int32"
										},
										"sink": {
											"name": "TripNo",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "LandedCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "LandedCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "AutoBackorder",
											"type": "Boolean"
										},
										"sink": {
											"name": "AutoBackorder",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "ManufacturersWarranty",
											"type": "Int32"
										},
										"sink": {
											"name": "ManufacturersWarranty",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ReplacementCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "ReplacementCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "UserVerified",
											"type": "String"
										},
										"sink": {
											"name": "UserVerified",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DateVerified",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateVerified",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TimeVerified",
											"type": "String"
										},
										"sink": {
											"name": "TimeVerified",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "OriginalCost",
											"type": "Decimal"
										},
										"sink": {
											"name": "OriginalCost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "ReserveExclusive",
											"type": "Boolean"
										},
										"sink": {
											"name": "ReserveExclusive",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "CommissionCode",
											"type": "String"
										},
										"sink": {
											"name": "CommissionCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EDIFormat",
											"type": "String"
										},
										"sink": {
											"name": "EDIFormat",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BranchCode",
											"type": "String"
										},
										"sink": {
											"name": "BranchCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "sysCreated",
											"type": "DateTime"
										},
										"sink": {
											"name": "sysCreated",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "sysModified",
											"type": "DateTime"
										},
										"sink": {
											"name": "sysModified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "DateCreated",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateCreated",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DateModified",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateModified",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "DateStamp",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateStamp",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "InPackage",
											"type": "Boolean"
										},
										"sink": {
											"name": "InPackage",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "InvoiceCode",
											"type": "String"
										},
										"sink": {
											"name": "InvoiceCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LineTimeStamp",
											"type": "String"
										},
										"sink": {
											"name": "LineTimeStamp",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LocationCode",
											"type": "String"
										},
										"sink": {
											"name": "LocationCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModelCode",
											"type": "String"
										},
										"sink": {
											"name": "ModelCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModelDesc",
											"type": "String"
										},
										"sink": {
											"name": "ModelDesc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NewUsed",
											"type": "String"
										},
										"sink": {
											"name": "NewUsed",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QtyOrdered",
											"type": "Int32"
										},
										"sink": {
											"name": "QtyOrdered",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "QtyReserved",
											"type": "Int32"
										},
										"sink": {
											"name": "QtyReserved",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "QtyShipped",
											"type": "Int32"
										},
										"sink": {
											"name": "QtyShipped",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SellingPrice",
											"type": "Decimal"
										},
										"sink": {
											"name": "SellingPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Spiff",
											"type": "Decimal"
										},
										"sink": {
											"name": "Spiff",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax1",
											"type": "Boolean"
										},
										"sink": {
											"name": "Tax1",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Tax1CostList",
											"type": "String"
										},
										"sink": {
											"name": "Tax1CostList",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tax1Included",
											"type": "Boolean"
										},
										"sink": {
											"name": "Tax1Included",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Tax1Percentage",
											"type": "Decimal"
										},
										"sink": {
											"name": "Tax1Percentage",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "Tax2",
											"type": "Boolean"
										},
										"sink": {
											"name": "Tax2",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Tax3",
											"type": "Boolean"
										},
										"sink": {
											"name": "Tax3",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "Total",
											"type": "Decimal"
										},
										"sink": {
											"name": "Total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 15
										}
									},
									{
										"source": {
											"name": "UserCreated",
											"type": "String"
										},
										"sink": {
											"name": "UserCreated",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UserModified",
											"type": "String"
										},
										"sink": {
											"name": "UserModified",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.InvoiceModel"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "InvoiceModelODS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-02T16:21:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Customer'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select         ID\n      ,FinanceCompany\n      ,FinanceDocument\n      ,ThirtyDayAccount\n      ,PORequired\n      ,Suite\n      ,Longitude\n      ,Latitude\n      ,Statement\n      ,DoNotMail\n      ,ShowInvoicesHyperlink\n      ,Extensions\n      ,Overdue30\n      ,Overdue60\n      ,Overdue90\n      ,Overdue\n      ,MaritalStatus\n      ,Dependants\n      ,EmpOccupation\n      ,Employer\n      ,DoNotService\n      ,MailingSameAsPhysical\n      ,InvTypeCode\n      ,EmpSupervisor\n      ,EmpAltSupervisor\n      ,EmpPayday\n      ,EmpExt\n      ,EmpFromTime\n      ,EmpToTime\n      ,WebID\n      ,WebPassword\n      ,WebDefaultLocation\n      ,WebShipPreference\n      ,WebChargeShipping\n      ,PaymentTypeCode\n      ,BankruptCode\n      ,CreditHold\n      ,WebNotShowRef\n      ,WebNotShowPastDueWarn\n      ,DoNotEmail\n      ,InvoiceDeliveryMethod\n      ,WebViewPartsLookup\n      ,WebViewCurrentOrders\n      ,WebViewOpenPartsList\n      ,WebViewHistory\n      ,WebAccessType\n      ,WebPassword2\n      ,WebCarrierCode\n      ,GoogleValidated\n      ,WebAllowSearchAll\n      ,Phone1TextEnabled\n      ,Phone2TextEnabled\n      ,BusinessPhoneTextEnabled\n      ,FaxTextEnabled\n      ,WebMessageUserCode\n      ,WebMessageRecUserCode\n      ,DoNotText\n      ,DoNotMMS\n      ,PreferredContact\n      ,WebSubmitClaim1Year\n      ,WebSubmitClaimSub\n      ,WebSubmitClaimWolf\n      ,WebReturnParts\n      ,UpdateContactInfo\n      ,SynchInMobileTech\n      ,WebLanguage\n      ,SalespersonCode\n      ,CreditManagerUserCode\n      ,CreditHoldDays\n      ,ForceCreditApproval\n      ,DoNotAllowSaveCreditCard\n      ,UseProjectPricing\n      ,ProjectCode\n      ,SaleReferralCode\n      ,Country\n      ,DeclineEmail\n      ,ParentCompanyCode\n      ,Table1Code\n      ,ExternalID\n      ,AccountType\n      ,AllowCharge\n      ,AveragePaymentDays\n      ,Balance\n      ,BillServiceCharge\n      ,BranchCode\n      ,City\n      ,Code\n      ,Contact\n      ,CreditLimit\n      ,DateCreated\n      ,DateModified\n      ,Directions\n      ,EnableCreditLimit\n      ,ExpiryDate\n      ,Field1\n      ,Field2\n      ,Field3\n      ,Field4\n      ,Field5\n      ,ItemListPriceCode\n      ,LaborRate\n      ,LastActivityDate\n      ,LastYearPurchase\n      ,MapReference\n      ,MapZoneCode\n      ,Note\n      ,OtherListPriceCode\n      ,PONumber\n      ,PrintStatement\n      ,SerialListPriceCode\n      ,State\n      ,Tax1Exempt\n      ,Tax2Exempt\n      ,Tax3Exempt\n      ,TaxCode\n      ,UserCreated\n      ,UserModified\n      ,Website\n      ,YTDPurchase\n      ,ZipCode\nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_created} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')\n\t and (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_created} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_CustomerDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Customer]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Customer_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Customer_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Customer' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.Customer"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "DateModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.Customer"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.Customer.DateModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_WaterMarkColumn_created": {
						"type": "string",
						"defaultValue": "DateCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T21:56:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_ProductMajor_Cache to ODS Copy Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Dim_ProductMajor"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_DimProductMajorDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Dim_ProductMajor]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Dim_ProductMajor_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSDim_ProductMajor_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Dim_ProductMajor"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T02:17:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_ProductSuper_Cache to ODS Copy Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Dim_ProductSuper"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_DimProductSuperDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Branch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Dim_ProductSuper]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Dim_ProductSuper_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSDim_ProductSuper_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Dim_ProductSuper"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T01:52:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceAddress_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='InvoiceAddress'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select  SQLUser.InvoiceAddress.ID\n      ,TripNo\n      ,ParentDateStamp\n      ,ParentLineTimeStamp\n      ,SQLUser.InvoiceAddress.sysCreated\n      ,SQLUser.InvoiceAddress.sysModified\n      ,SQLUser.InvoiceAddress.Amount\n      ,SQLUser.InvoiceAddress.Code\n      ,SQLUser.InvoiceAddress.DateStamp\n      ,SQLUser.InvoiceAddress.Description\n      ,SQLUser.InvoiceAddress.InPackage\n      ,InvoiceCode\n      ,LineNo\n      ,LineTimeStamp\n      ,LineType\n      ,SQLUser.InvoiceAddress.LocationCode\n      ,SQLUser.InvoiceAddress.Qty\n      ,SQLUser.InvoiceAddress.Status\n      ,SQLUser.InvoiceAddress.Tax1\n      ,SQLUser.InvoiceAddress.Tax2\n      ,SQLUser.InvoiceAddress.Tax3\n      \nfrom \nSQLUser.InvoiceAddress INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceAddress.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceAddress.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceAddress.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceAddress.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceAddressDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceAddress]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceAddress_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceAddress_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='InvoiceAddress' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceAddress"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceAddress"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceAddress.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceAddress"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-08T23:54:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceMisc_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='InvoiceMisc'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select   SQLUser.InvoiceMisc.ID      ,SQLUser.InvoiceMisc.TripNo      ,SQLUser.InvoiceMisc.Comment     ,SQLUser.InvoiceMisc.SubmittedDate     ,SQLUser.InvoiceMisc.SubmittedTime      ,SQLUser.InvoiceMisc.SubmittedUser     ,SQLUser.InvoiceMisc.CreditedDate     ,SQLUser.InvoiceMisc.CreditedTime     ,SQLUser.InvoiceMisc.CreditedUser      ,SQLUser.InvoiceMisc.InvoicePaymentRef      ,SQLUser.InvoiceMisc.UserVerified     ,SQLUser.InvoiceMisc.DateVerified     ,SQLUser.InvoiceMisc.TimeVerified      ,SQLUser.InvoiceMisc.CommissionCode      ,SQLUser.InvoiceMisc.EDIFormat      ,SQLUser.InvoiceMisc.InvoiceModelDateStamp   ,SQLUser.InvoiceMisc.InvoiceModelLineTimeStamp      ,SQLUser.InvoiceMisc.InvoiceModelInvoiceCode     ,SQLUser.InvoiceMisc.InvoiceModelCode   ,SQLUser.InvoiceMisc.BranchCode     ,SQLUser.InvoiceMisc.sysCreated    ,SQLUser.InvoiceMisc.sysModified     ,SQLUser.InvoiceMisc.DateCreated      ,SQLUser.InvoiceMisc.DateModified     ,SQLUser.InvoiceMisc.DateStamp      ,SQLUser.InvoiceMisc.GLCostCr      ,SQLUser.InvoiceMisc.GLCostDb      ,SQLUser.InvoiceMisc.GLRevenue      ,SQLUser.InvoiceMisc.InPackage     ,SQLUser.InvoiceMisc.InvoiceCode      ,SQLUser.InvoiceMisc.LineTimeStamp      ,SQLUser.InvoiceMisc.MiscCode      ,SQLUser.InvoiceMisc.MiscDesc     ,SQLUser.InvoiceMisc.Qty     ,SQLUser.InvoiceMisc.SellingPrice      ,SQLUser.InvoiceMisc.Tax1     ,SQLUser.InvoiceMisc.Tax2     ,SQLUser.InvoiceMisc.Tax3     ,SQLUser.InvoiceMisc.Total     ,SQLUser.InvoiceMisc.UnitCost     ,SQLUser.InvoiceMisc.UpdateHistory     ,SQLUser.InvoiceMisc.UserCreated      ,SQLUser.InvoiceMisc.UserModified     ,SQLUser.InvoiceMisc.Warranty\n      \nfrom \nSQLUser.InvoiceMisc INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceMisc.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceMisc.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceMisc.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceMisc.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceMiscDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceMisc]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceMisc_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceMisc_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='InvoiceMisc' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceMisc"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceMisc"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceMisc.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -2
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceMisc"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:28:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceModel_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='InvoiceModel'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select         SQLUser.InvoiceModel.ID\n      ,SQLUser.InvoiceModel.TakenStatus\n      ,SQLUser.InvoiceModel.TakenDate\n      ,SQLUser.InvoiceModel.AverageCost\n      ,SQLUser.InvoiceModel.StandardCost\n      ,SQLUser.InvoiceModel.LastCost\n      ,SQLUser.InvoiceModel.Color\n      ,SQLUser.InvoiceModel.POCode\n      ,SQLUser.InvoiceModel.Reference\n      ,SQLUser.InvoiceModel.PODateStamp\n      ,SQLUser.InvoiceModel.POLineTimeStamp\n      ,SQLUser.InvoiceModel.SpecialOrderDate\n      ,SQLUser.InvoiceModel.TripNo\n      ,SQLUser.InvoiceModel.LandedCost\n      ,SQLUser.InvoiceModel.AutoBackorder\n      ,SQLUser.InvoiceModel.ManufacturersWarranty\n      ,SQLUser.InvoiceModel.ReplacementCost\n      ,SQLUser.InvoiceModel.UserVerified\n      ,SQLUser.InvoiceModel.DateVerified\n      ,SQLUser.InvoiceModel.TimeVerified\n      ,SQLUser.InvoiceModel.OriginalCost\n      ,SQLUser.InvoiceModel.ReserveExclusive\n      ,SQLUser.InvoiceModel.CommissionCode\n      ,SQLUser.InvoiceModel.EDIFormat\n      ,SQLUser.InvoiceModel.BranchCode\n      ,SQLUser.InvoiceModel.sysCreated\n      ,SQLUser.InvoiceModel.sysModified\n      ,SQLUser.InvoiceModel.DateCreated\n      ,SQLUser.InvoiceModel.DateModified\n      ,SQLUser.InvoiceModel.DateStamp\n      ,SQLUser.InvoiceModel.InPackage\n      ,SQLUser.InvoiceModel.InvoiceCode\n      ,SQLUser.InvoiceModel.LineTimeStamp\n      ,SQLUser.InvoiceModel.LocationCode\n      ,SQLUser.InvoiceModel.ModelCode\n      ,SQLUser.InvoiceModel.ModelDesc\n      ,SQLUser.InvoiceModel.NewUsed\n      ,SQLUser.InvoiceModel.QtyOrdered\n      ,SQLUser.InvoiceModel.QtyReserved\n      ,SQLUser.InvoiceModel.QtyShipped\n      ,SQLUser.InvoiceModel.SellingPrice\n      ,SQLUser.InvoiceModel.Spiff\n      ,SQLUser.InvoiceModel.Status\n      ,SQLUser.InvoiceModel.Tax1\n      ,SQLUser.InvoiceModel.Tax1CostList\n      ,SQLUser.InvoiceModel.Tax1Included\n      ,SQLUser.InvoiceModel.Tax1Percentage\n      ,SQLUser.InvoiceModel.Tax2\n      ,SQLUser.InvoiceModel.Tax3\n      ,SQLUser.InvoiceModel.Total\n      ,SQLUser.InvoiceModel.UserCreated\n      ,SQLUser.InvoiceModel.UserModified\n      \nfrom \nSQLUser.InvoiceModel INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceModel.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceModel.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceModel.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceModel.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceModelDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceModel]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceModel_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceModel_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='InvoiceModel' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceModel"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceModel.sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceModel"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceModel.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceModel"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T23:02:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoicePayment_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='InvoicePayment'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select               SQLuser.InvoicePayment.ID\n      ,SQLuser.InvoicePayment.TripNo\n      ,SQLuser.InvoicePayment.CashedOut\n      ,SQLuser.InvoicePayment.CashOutUser\n      ,SQLuser.InvoicePayment.CashOutDateStamp\n      ,SQLuser.InvoicePayment.CashOutTimeStamp\n      ,SQLuser.InvoicePayment.TerminalCode\n      ,SQLuser.InvoicePayment.PayerIdentifier\n      ,SQLuser.InvoicePayment.SPAN\n      ,SQLuser.InvoicePayment.PayerDataManagedUntilDate\n      ,SQLuser.InvoicePayment.CardBrand\n      ,SQLuser.InvoicePayment.EntryMethod\n      ,SQLuser.InvoicePayment.InvoicePaymentRef\n      ,SQLuser.InvoicePayment.PayerIdType\n      ,SQLuser.InvoicePayment.sysCreated\n      ,SQLuser.InvoicePayment.sysModified\n      ,SQLuser.InvoicePayment.BankTransactionID\n      ,SQLuser.InvoicePayment.Amount\n      ,SQLuser.InvoicePayment.AuthCode\n      ,SQLuser.InvoicePayment.AuthStatus\n      ,SQLuser.InvoicePayment.BranchCode\n      ,SQLuser.InvoicePayment.CardNumber\n      ,SQLuser.InvoicePayment.DateCreated\n      ,SQLuser.InvoicePayment.DateModified\n      ,SQLuser.InvoicePayment.DateStamp\n      ,SQLuser.InvoicePayment.Description\n      ,SQLuser.InvoicePayment.ExpiryDate\n      ,SQLuser.InvoicePayment.InvoiceCode\n      ,SQLuser.InvoicePayment.LineTimeStamp\n      ,SQLuser.InvoicePayment.PaymentTypeCode\n      ,SQLuser.InvoicePayment.PostDate\n      ,SQLuser.InvoicePayment.RespBankText\n      ,SQLuser.InvoicePayment.RespBatchNo\n      ,SQLuser.InvoicePayment.RespDate\n      ,SQLuser.InvoicePayment.RespItemNo\n      ,SQLuser.InvoicePayment.RespRefNo\n      ,SQLuser.InvoicePayment.RespSettlementAmount\n      ,SQLuser.InvoicePayment.RespTime\n      ,SQLuser.InvoicePayment.Status\n      ,SQLuser.InvoicePayment.UserCreated\n      ,SQLuser.InvoicePayment.UserModified\nfrom \nSQLUser.InvoicePayment INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoicePayment.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoicePayment.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoicePayment.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoicePayment.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoicePaymentDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoicePayment]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoicePayment_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoicePayment_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='InvoicePayment' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoicePayment"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoicePayment"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoicePayment.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoicePayment"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.InvoicePayment.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceSerial_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='InvoiceSerial'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select               SQLUser.InvoiceSerial.ID\n      ,SQLUser.InvoiceSerial.TakenLocationCode\n      ,SQLUser.InvoiceSerial.ReturnReasonCode\n      ,SQLUser.InvoiceSerial.ReturnOutcomeCode\n      ,SQLUser.InvoiceSerial.ReturnInitiatedByCode\n      ,SQLUser.InvoiceSerial.sysCreated\n      ,SQLUser.InvoiceSerial.sysModified\n      ,SQLUser.InvoiceSerial.DateCommitted\n      ,SQLUser.InvoiceSerial.DateCreated\n      ,SQLUser.InvoiceSerial.DateModified\n      ,SQLUser.InvoiceSerial.InvoiceCode\n      ,SQLUser.InvoiceSerial.LocationCode\n      ,SQLUser.InvoiceSerial.ModelCode\n      ,SQLUser.InvoiceSerial.ModelDateStamp\n      ,SQLUser.InvoiceSerial.ModelLineTimeStamp\n      ,SQLUser.InvoiceSerial.Returned\n      ,SQLUser.InvoiceSerial.SerialCode\n      ,SQLUser.InvoiceSerial.Status\n      ,SQLUser.InvoiceSerial.Taken\n      ,SQLUser.InvoiceSerial.TakenDate\n      ,SQLUser.InvoiceSerial.TakenStatus\n      ,SQLUser.InvoiceSerial.UnitCost\n      ,SQLUser.InvoiceSerial.UserCreated\n      ,SQLUser.InvoiceSerial.UserModified\n      \nfrom \nSQLUser.InvoiceSerial INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceSerial.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceSerial.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceSerial.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceSerial.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceSerialDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceSerial]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceSerial_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceSerial_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='InvoiceSerial' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceSerial"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceSerial"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceSerial.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceSerial"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceSerial.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceWarranty_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='InvoiceWarranty'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select         SQLUser.InvoiceWarranty.ID\n      ,SQLUser.InvoiceWarranty.TripNo\n      ,SQLUser.InvoiceWarranty.Acknowledged\n      ,SQLUser.InvoiceWarranty.DateAcknowledged\n      ,SQLUser.InvoiceWarranty.OrgModSelPrice\n      ,SQLUser.InvoiceWarranty.CheckException\n      ,SQLUser.InvoiceWarranty.UserVerified\n      ,SQLUser.InvoiceWarranty.DateVerified\n      ,SQLUser.InvoiceWarranty.TimeVerified\n      ,SQLUser.InvoiceWarranty.CommissionCode\n      ,SQLUser.InvoiceWarranty.BranchCode\n      ,SQLUser.InvoiceWarranty.sysCreated\n      ,SQLUser.InvoiceWarranty.sysModified\n      ,SQLUser.InvoiceWarranty.Commission\n      ,SQLUser.InvoiceWarranty.ContractNumber\n      ,SQLUser.InvoiceWarranty.DateCreated\n      ,SQLUser.InvoiceWarranty.DateModified\n      ,SQLUser.InvoiceWarranty.DateStamp\n      ,SQLUser.InvoiceWarranty.EndDate\n      ,SQLUser.InvoiceWarranty.ExtWarrantyCode\n      ,SQLUser.InvoiceWarranty.ExtWarrantyDesc\n      ,SQLUser.InvoiceWarranty.GLCostCr\n      ,SQLUser.InvoiceWarranty.GLCostDb\n      ,SQLUser.InvoiceWarranty.GLRevenue\n      ,SQLUser.InvoiceWarranty.InPackage\n      ,SQLUser.InvoiceWarranty.InvoiceCode\n      ,SQLUser.InvoiceWarranty.LineTimeStamp\n      ,SQLUser.InvoiceWarranty.Model\n      ,SQLUser.InvoiceWarranty.SellingPrice\n      ,SQLUser.InvoiceWarranty.Serial\n      ,SQLUser.InvoiceWarranty.StartDate\n      ,SQLUser.InvoiceWarranty.Tax1\n      ,SQLUser.InvoiceWarranty.Tax2\n      ,SQLUser.InvoiceWarranty.Tax3\n      ,SQLUser.InvoiceWarranty.UnitCost\n      ,SQLUser.InvoiceWarranty.UserCreated\n      ,SQLUser.InvoiceWarranty.UserModified\nfrom \nSQLUser.InvoiceWarranty INNER JOIN SQLUser.Invoice ON InvoiceCode=SQLUser.Invoice.Code\nwhere (@{pipeline().parameters.Data_Source2_WaterMarkColumn} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR (SQLUser.InvoiceWarranty.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}' OR SQLUser.InvoiceWarranty.sysModified>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')) and (@{pipeline().parameters.Data_Source2_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR \n(SQLUser.InvoiceWarranty.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}' OR SQLUSer.InvoiceWarranty.sysModified<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceWarrantyDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_InvoiceWarranty]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Modified Records",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceWarranty_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Modified Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InvoiceWarranty_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='InvoiceWarranty' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.InvoiceWarranty"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.InvoiceWarranty"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceWarranty.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "InvoiceWarranty"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"Data_Source_Table_Name2": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source2_WaterMarkColumn": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"Data_Source2_WaterMarkColumn2": {
						"type": "string",
						"defaultValue": "SQLUser.InvoiceWarranty.sysCreated"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T05:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Invoice_CachetoODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Landing_watermarktableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,0,[ETL Last Run Start]) as NewWatermarkValue\nFROM ca.Control_Table\nWHERE [Group]=10 AND Entity='Invoice'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Truncate Landing_Invoice Procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupDeltaOffset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": {
									"value": "select  ID , Financed , Void , Qualification , Priority , Tax3Percentage \n      , SvcRepairCode1 , SvcRepairCode2 , SvcRepairCode3 , SvcRepairCode4 , ContractCode , SvcContract \n      , UserFinished , UserPosted , UpdateHistoryWarranty , ShipMethod , TimeCreated , TimeModified , TimeFinished \n      , DispatchUnits , EDIDateStamp , EDITimeStamp , PrintMethod , DispatchStartTime , TripChargeCode \n      , TripChargeAmount \n      , Locked \n      , MobileTechInvoiceCode \n      , ServiceRequestID \n      , CarrierCode \n      , ShipViaCode \n      , JobStatusUpdate \n      , DispatchEmail \n      , LastDateSaved \n      , LastTimeSaved \n      , Terms \n      , SvcEquipmentNumber \n      , WebOrderID \n      , Department \n      , CreditStatusCode \n      , CreditApprovedUserCode \n      , CreditApprovedDateStamp \n      , CreditApprovedTimeStamp \n      , EDIMaroline \n      , RequestedDate \n      , SvcCSRInvoice \n      , SvcSoldList \n      , SvcSoldSTDCost \n      , SvcFollowUpDate \n      , SvcScheduleDate \n      , Tax2MaxAmount \n      , EDIWhirlpool \n      , MinDepositPercent \n      , UnitModifier \n      , DateFinished \n      , DatePosted \n      , TimePosted \n      , TTRTaxCalculated \n      , PickUpBranchCode \n      , PodiumOptOut \n      , SignCustmizedFields \n      , AVBSaleDateSent \n      , AVBSaleTimeSent \n      , sysCreated \n      , sysModified \n      , TTRJurisdictionCode \n      , BranchCode \n      , COGSPosted \n      , CallSequence \n      , Code \n      , CommittedPaymentTotal \n      , DateCreated \n      , DateModified \n      , DispatchPriority \n      , DispatchRequestedRouteCode \n      , DispatchSpecRequest \n      , DispatchTime \n      , DispatchTimeAM \n      , Estimate \n      , Field1 \n      , Field2 \n      , Field3 \n      , Field4 \n      , Field5 \n      , InvFinishDate \n      , InvStartDate \n      , InvTypeCode \n      , ItemListPriceCode \n      , ItemTotal \n      , JobLocation \n      , JobNumber \n      , JobStatusCode \n      , LaborRate \n      , LaborTotal \n      , MapReference \n      , MapZoneCode \n      , MiscTotal \n      , OpenPaymentTotal \n      , OtherListPriceCode \n      , PONumber \n      , PaymentTypeCode \n      , PickUpDate \n      , Reference \n      , SaleReferralCode \n      , Salesperson1Code \n      , Salesperson2Code \n      , Salesperson2Percentage \n      , ScheduleDate \n      , SerialListPriceCode \n      , SerialTotal \n      , Status \n      , SvcAgreementExpDate \n      , SvcAgreementNumber \n      , SvcBrandCode \n      , SvcCenter \n      , SvcCenterNumber \n      , SvcComplaintCode \n      , SvcComplaintDesc \n      , SvcDatePurchased \n      , SvcDealerCode \n      , SvcDealerDesc \n      , SvcDistributorNumber \n      , SvcInWarranty \n      , SvcMfgCodeEiaNumber \n      , SvcMicroLeak \n      , SvcMiles \n      , SvcMilesRate \n      , SvcMilesTotal \n      , SvcModel \n      , SvcMotorNewNumber \n      , SvcMotorOldNumber \n      , SvcPerformedCode \n      , SvcPerformedDesc \n      , SvcProduct \n      , SvcProductCode \n      , SvcRepairCatMinorMajor \n      , SvcRepairCategory \n      , SvcRepairCode \n      , SvcRunNumber \n      , SvcSerial \n      , SvcSpecAuthNumber \n      , SvcStockMerchandise \n      , SvcTimeCompleted1 \n      , SvcTimeCompleted2 \n      , SvcTimeOnJob1 \n      , SvcTimeOnJob2 \n      , SvcTimeStarted1 \n      , SvcTimeStarted2 \n      , Tax1Exempt \n      , Tax1Total \n      , Tax2Code \n      , Tax2Exempt \n      , Tax2Percentage \n      , Tax2Total \n      , Tax3Exempt \n      , Tax3Total \n      , UserCreated \n      , UserModified \n      , Warranty \n      , WarrantyField1 \n      , WarrantyField2 \n      , WarrantyField3 \n      , WarrantyField4 \n      , WarrantyField5 \n      , WtyTotal \nfrom \n@{pipeline().parameters.Data_Source_Table_Name} \n\t where (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} > '@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}'  OR\n@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} IS NULL OR\nSQLUser.Invoice.sysCreated>'@{activity('LookupDeltaOffset').output.firstRow.DeltaOffset}')\n\t and (@{pipeline().parameters.Data_Source_WaterMarkColumn_modified} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'  OR \nSQLUser.Invoice.sysCreated<='@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "OdbcDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_InvoiceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate Landing_Invoice Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Invoice]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Invoice_Delete]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Test_2_Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Invoice_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupDeltaOffset",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DATEADD(dd,-[DeltaOffset (Days)],[ETL Last Run End]) AS DeltaOffset\nFROM ca.Control_Table\nWHERE Entity='Invoice' AND\n             [Group]=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Test_2_Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "SQLUser.Invoice"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "sysModified"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "rd.Invoice"
					},
					"Data_Destination_Directory": {
						"type": "String"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "watermark_table"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "Invoicewatermark_value"
					},
					"Data_Source_WaterMarkColumn_modified": {
						"type": "string",
						"defaultValue": "SQLUser.Invoice.sysModified"
					},
					"DeltaOffset": {
						"type": "int",
						"defaultValue": -1
					},
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Invoice"
					},
					"ControlTable_Group1": {
						"type": "int",
						"defaultValue": 10
					},
					"ControlTable_Group2": {
						"type": "int",
						"defaultValue": 20
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					}
				},
				"variables": {
					"Run Start 1": {
						"type": "String"
					},
					"Run Start 2": {
						"type": "String"
					},
					"Run End 1": {
						"type": "String"
					},
					"Run End 2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-11T13:58:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Location_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Location"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_LocationDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Location",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Location]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Location_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateControlTable",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Truncate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ODSLocation_Truncate]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Location"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T14:53:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Misc_Cache to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivity1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Misc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_hdo",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SQLUser.Misc"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Landing_MiscDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Misc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LandingTablesTruncate_Misc]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1_Landing Linked Service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Misc_Insert]"
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger Begin 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 1').output.firstRow.RunStart1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CopyActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd1]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 1').output.firstRow.RunEnd1}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group1}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run Start 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Load Active Trigger End 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunStart2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Run Start 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLBeginTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run Start 2').output.firstRow.RunStart2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger Begin 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set Run Start 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Run End 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  DATEADD(hh,-7,current_timestamp) AS [RunEnd2]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "UpdateWaterMark",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Run End 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_ETLTimes]",
							"storedProcedureParameters": {
								"Column_Name": {
									"value": {
										"value": "@{pipeline().parameters.ETLEndTimeColumn}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"GetRunEnd": {
									"value": {
										"value": "@{activity('Get Run End 2').output.firstRow.RunEnd2}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Load Active Trigger End 2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "UpdateWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Control_LoadActive]",
							"storedProcedureParameters": {
								"Entity": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Entity}",
										"type": "Expression"
									},
									"type": "String"
								},
								"Group": {
									"value": {
										"value": "@{pipeline().parameters.ControlTable_Group2}",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Secondary1LinkedService_Test",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"ControlTable_Entity": {
						"type": "string",
						"defaultValue": "Misc"
					},
					"ControlTable_Group1": {
						"type": "string",
						"defaultValue": "10"
					},
					"ETLBeginTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run Start"
					},
					"ETLEndTimeColumn": {
						"type": "string",
						"defaultValue": "ETL Last Run End"
					},
					"ControlTable_Group2": {
						"type": "string",
						"defaultValue": "20"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T17:08:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_hdo')]"
			]
		}
	]
}